<templateSet group="JavaScript">
  <template name="cl" value="console.log($END$);&#10;" description="console.log()" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="fn" value="function(){&#10;    $END$&#10;}" description="function(){}" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="fn," value="function(){&#10;    $END$&#10;}," description="function(){}," toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="fsy" value="sy(function*f(){&#10;    $END$&#10;})" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="qq" value="var rows = yield app.db.query(&quot;SELECT * FROM $END$&quot;, resume);" description="app.db.query" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="nm" value="module.exports = function (app) {&#10;    return function* (req, res, next, resume) {&#10;        var id = req.params.id;&#10;        if (req.method == 'GET') {&#10;            $END$&#10;        }&#10;    }.toFn();&#10;};" description="NodeJS new module" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="ref" value="///&lt;reference path=&quot;$PATH$&quot;/&gt;&#10;$END$" description="Inserts reference path comment" toReformat="true" toShortenFQNames="false">
    <variable name="PATH" expression="complete()" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="itar" value="for (let $INDEX$ = 0; $INDEX$ &lt; $ARRAY$.length; $INDEX$++) {&#10;  const $VAR$ = $ARRAY$[$INDEX$];&#10;  $END$&#10;}" description="Iterate elements of array" toReformat="true" toShortenFQNames="true">
    <variable name="INDEX" expression="jsSuggestIndexName()" defaultValue="&quot;i&quot;" alwaysStopAt="true" />
    <variable name="ARRAY" expression="jsArrayVariable()" defaultValue="&quot;array&quot;" alwaysStopAt="true" />
    <variable name="VAR" expression="jsSuggestVariableName()" defaultValue="&quot;o&quot;" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="iter" value="const keys = Object.keys($OBJ$);&#10;let i = keys.length;&#10;while (--i) {&#10;    const $KEY$ = keys[i];&#10;    const $VALUE$ = $OBJ$[$KEY$];&#10;    $SELECTION$&#10;}&#10;" description="Iterate (for each..in) - JavaScript 1.6+" toReformat="true" toShortenFQNames="true">
    <variable name="OBJ" expression="jsObjectVariable()" defaultValue="obj" alwaysStopAt="true" />
    <variable name="KEY" expression="" defaultValue="key" alwaysStopAt="true" />
    <variable name="VALUE" expression="jsSuggestVariableName()" defaultValue="value" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="comp" value="import * as React from 'react';&#10;&#10;interface $NAME$Props {&#10;&#10;}&#10;&#10;export class $NAME$ extends React.Component&lt;$NAME$Props, {}&gt; {&#10;    render() {&#10;        const {} = this.props;&#10;        return (&#10;            &lt;div className=&quot;&quot;&gt;&#10;                $NAME$&#10;            &lt;/div&gt;        &#10;        );    &#10;    }&#10;}&#10;" description="React.Componen" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
</templateSet>