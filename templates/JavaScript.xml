<templateSet group="JavaScript">
  <template name="var" value="const " shortcut="SPACE" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="f" value="() =&gt; {&#10;    $SELECTION$&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="cl" value="console.log($SELECTION$);" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="itar" value="for (let $INDEX$ = 0; $INDEX$ &lt; $ARRAY$.length; $INDEX$++) {&#10;  const $VAR$ = $ARRAY$[$INDEX$];&#10;  $END$&#10;}" description="Iterate elements of array" toReformat="true" toShortenFQNames="true">
    <variable name="INDEX" expression="jsSuggestIndexName()" defaultValue="&quot;i&quot;" alwaysStopAt="true" />
    <variable name="ARRAY" expression="jsArrayVariable()" defaultValue="&quot;array&quot;" alwaysStopAt="true" />
    <variable name="VAR" expression="jsSuggestVariableName()" defaultValue="&quot;o&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="comp" value="import * as React from 'react';&#10;&#10;export interface $NAME$Props {&#10;    abc: string;&#10;}&#10;&#10;export class $NAME$ extends React.Component&lt;$NAME$Props, {}&gt; {&#10;    render() {&#10;        const {abc} = this.props;&#10;        return (&#10;            &lt;div className=&quot;&quot;&gt;&lt;/div&gt; &#10;        );&#10;    }&#10;}" description="React.Component" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="classNameComplete()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
</templateSet>